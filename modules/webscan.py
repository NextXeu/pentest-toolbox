import requests
import re

def check_server(url, pdf=False):
    HTML = ""
    try:
        response = requests.get(url)
    except requests.exceptions.RequestException as e:
        print("Erreur lors de la requête : ", e)
        sys.exit(1)

    server = response.headers.get("Server")
    x_powered_by = response.headers.get("X-Powered-By")

    if server is not None:
        print(">>> [+] Webserver is  : ", server)
        if pdf:
            HTML += f"<p>Web server : {server}<p>"
    if x_powered_by is not None:
        print(">>> [+] Webserver uses : ", x_powered_by)
        if pdf:
            HTML += f"<p>Server uses : {x_powered_by}<p>"

    # Vérifier si le serveur supporte la compression
    if "Content-Encoding" in response.headers:
        print(">>> [+] The server supports compression.")
        if pdf:
            HTML += f"<p>The server supports compression.<p>"
    else:
        print(">>> [+] The server doesn't supports compression.")
        if pdf:
            HTML += f"<p>The server doesn't supports compression.<p>"

    version_regex = re.compile(r"\d+\.\d+(\.\d+)?")
    for header in response.headers:
        match = version_regex.search(response.headers[header])
        if match:
            print(">>> [+] Version of software might be found in the following header '{}' : {}".format(header, match.group(0)))
            if pdf:
                HTML += f"<p>Version of software might be found in the following header {header} : {match.group(0)}<p>"

    # Vérifier si l'URL cible redirige vers une autre URL
    if response.status_code in [301, 302]:
        loca_header = response.headers.get("Location")
        print(">>> [+] Target URL uses redirection towards : ", loca_header)
        if pdf:
            HTML += f"<p>Target URL uses redirection towards {loca_header}<p>"
    else:
        print(">>> [-] Target URL don't uses any redirection")
        if pdf:
            HTML += f"<p>Target URL don't uses any redirection<p>"

    # Vérifier si l'URL cible est protégée par une authentification basique HTTP
    if response.status_code == 401:
        print(">>> [+] Target URL is protected by a basic HTTP authentication")
        if pdf:
            HTML += f"<p>Target URL is protected by a basic HTTP authentication<p>"
    else:
        print(">>> [-] Target URL isn't protected by a basic HTTP authentication")
        if pdf:
            HTML += f"<p>Target URL isn't protected by a basic HTTP authentication<p>"
    
    if pdf:
        return HTML

def check_robots_txt(url):
    try:
        r = requests.get(url + "/robots.txt")
        if r.status_code == 200:
            print(">>> [+] robots.txt is publicly accessible.")
            print(">>> [+] Content of robots.txt: \n" + r.text)
        else:
            print(">>> [-] robots.txt is not publicly accessible.")
    except requests.exceptions.RequestException as e:
        print(">>> [-] Exception Occured: " + str(e))

